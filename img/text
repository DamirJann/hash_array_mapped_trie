
В предыдущих главе подробнейшим образом были описаны теоретические аспекты алгоритма lock-free Hash Array Mapped Hamt и также заложены предпосылки для внедрения.  Внедрение таких алгоритмов — процесс трудозатратный. Он включает в себя множество пунктов: постоянная отладка программы, ручное и автоматическое тестирование, анализ кода, проверка гипотез, исправление ошибок и так далее. Чтобы облегчить эти процессы, необходимо иметь чёткий план действий: что реализовывать в впервую очередь, а что можно отложить на потом.
План для разработки:
    • Настройка среды разработки
    • Реализация однопоточной версии HAMT
    • Реализация блокирующей многопоточной версии
    • Переход к неблокирующей многопоточной версии HAMT
    • Решение проблемы ABA
    • Внедрение в библиотеку libcds

2.1 Настройка среды разработки

	В качестве контроля версий был выбран Git. Он является свободно распространяемым, наиболее популярным и имеет необходимый функционал:
    • создание веток разработки
    • слияние одной ветки в другую
    • просмотр истории файла
    • создание именованных комитов
    • режим сравнения двух веток разработки
    • удобное взаимодействие через командную строку
    • множество интеграций с другими сервисами

	Для того, чтобы код не хранился в одном месте, а также была возможность поделиться с ним, использовался GitHub. Это  бесплатный сервис, который работает с системой версией Git и позволяет хранить, анализировать код, производить Git команды, совместно редактировать код и тестировать его благодаря GitHub Actions.


	Благодаря GitHub Actions можно настроить систему так, чтобы при каждом коммите тестировался код. В основной репозиторий был положен файл Dockerfile, который запускет докер контейнер при коммите. В него устанавливалась операционная система, копировутеся код из репозитория текущего репозитория GitHub и запускается скрипт entrypoints.sh

# Container for building and testing cmake projects v3.16
FROM ubuntu:18.04
# get the latest cmake release
RUN apt-get -y update
RUN apt-get -y install software-properties-common git wget clang-10
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
RUN apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
RUN apt-get -y install build-essential cmake qtbase5-dev
COPY entrypoint.sh /entrypoint.sh
COPY ./ /hamt
RUN chmod +x entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

В скрипте entrypoints.sh прозводятся приготовления для сборки и запуска исполняемого файла для тестирования.

#!/usr/bin/env bash
cd "$GITHUB_WORKSPACE" || exit 1
cd test
cmake  -DCMAKE_C_COMPILER=clang-10 -DCMAKE_CXX_COMPILER=clang++-10 .
make
./run_tests







Для сборки был написан CmakeFileLists.txt. Этот файл используется утилитой CMake, которая генерирует Makefile. А Makefile, в свою очередь, используется утилитой Make, которая создаёт на его основе исполняемый файл для тестования.

cmake_minimum_required(VERSION 3.16)
project(tests)

set(CMAKE_CXX_STANDARD 14)

add_subdirectory(../lib/googletest googletests)

# TEST TARGET
add_executable(
        run_tests test.cpp ../src/utils.cpp
)

target_link_libraries(
        run_tests PRIVATE
        gtest gtest_main
)

Cmake для сборки был выбран так как прост в использовании и описания действий выражаются проще и короче, чем в утилите Make.
	В качестве интегрированной среды разработки был выбран Clion от компании JetBrains. Помимо встроенного отладчика, статических анализаторов кода, Clion предоставляет удобный графический интерфейс к Git, а также интегрируется с GitHub.
	Одна из особенностей лок-фри алгоритмов, что ошибка на конкретных тестах может появляться не постоянно. Поэтому было необходимо тестировать код как можно чаще, чтобы была больше вероятность воспроизвести потенциальные ошибки в коде. GitHub action позволяет запускать тесты, не только при каждом коммите, но и по расписанию. Так, в специальный файл, отвечающий за запуск докер контейнера, было добавлена следующая строка:


  schedule:
  - cron: '*/5 * * * *'

В поле cron в синтаксисе подобном crontab находится указание запускать докер контейнер с тестами по расписанию «каждые пять минут». В случае, если тесты проходят неуспешно, на почту отсылается соответствующее уведомление.
Автоматическое тестирование при коммитах и по расписанию облегчает внесения изменений в код. Также это ускоряет разработку, так как избавляет от необходимости ручного тестирования и ожидания результатов.
	Ещё одна проблема разработке — отладка программы. Clion предоставляет прекрасные возможности для этого, но этого недосаточно. Зачастую необходима визуализация самой структуры данных Hash Array Mapped Hamt. Для этого в исходный репозитория был добавлен код для визуализации (visualize.h), в котором была реализована логика сбора информации о переданном HAMT, её обработка, а затем передача библиотеке boost graphviz hpp.  Данная библиотека умеет визуализировать графы в формате в png.

















Рисунок 2.1.1 – Дерево, построенное при помощи visualize.h